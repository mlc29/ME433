from ulab import numpy as np
import time

dt = 1.0/1024.0 # 10kHz
t = np.arange(0.0, 1.0, dt) # 10s
# a constant plus 100Hz and 1000Hz
s = 10*np.sin(2*np.pi*5*t) + 5*np.sin(2*np.pi*100*t) + 7*np.sin(2*np.pi*250*t)

Fs = 1024 # sample rate
Ts = 1.0/Fs; # sampling interval
ts = np.arange(0,t[-1],Ts) # time vector
y = s # the data to make the fft from
n = len(y) # length of the signal
k = np.arange(n)
T = n/Fs
frq = k/T # two sides frequency range
frq = frq[:int(n/2)] # one side frequency range
real,imag = np.fft.fft(y) # fft computing and normalization

Y = np.sqrt(real**2 + imag**2)
Y=Y/n
Y = Y[:int(n/2)]

i=0
while i < len(Y):
    print("(" + str(np.log(Y[i])) + ")")
    i+=1
    time.sleep(0.05)
